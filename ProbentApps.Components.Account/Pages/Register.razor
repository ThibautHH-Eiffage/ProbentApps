@page "/Account/Register"

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<MudText Typo="Typo.h3" GutterBottom>Register</MudText>

<MudGrid>
    <MudItem md="6">
        <StatusMessage Message="@message" />
        <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register" method="post" asp-route-returnUrl="@ReturnUrl">
            <DataAnnotationsValidator />

            <MudText GutterBottom>Create a new account.</MudText>

            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                        Label="Email" Placeholder="name@example.com"
                        autocomplete="username" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                        Label="Password" InputType="InputType.Password"
                        autocomplete="new-password" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                        Label="Password confirmation" InputType="InputType.Password"
                        autocomplete="new-password" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth FormAction="FormAction.Submit">Register</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
    <MudItem md="6">
        <MudText Typo="Typo.body1" GutterBottom>Use another service to register.</MudText>
        <ExternalLoginPicker />
    </MudItem>
</MudGrid>

@code {
    private string? message;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = new ApplicationUser() { ManagedStructures = null! };

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await ((UserManager.SupportsUserEmail ? UserStore as IUserEmailStore<ApplicationUser> : null)
            ?.SetEmailAsync(user, Input.Email, CancellationToken.None) ?? Task.CompletedTask);

        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            message = $"Error: {string.Join(", ", result.Errors.Select(error => error.Description))}";
            return;
        }

        Logger.LogInformation("User with ID '{UserId}' created with local password.", user.Id);

        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?>
            {
                ["userId"] = user.Id,
                ["returnUrl"] = ReturnUrl,
                ["code"] = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(
                    await UserManager.GenerateEmailConfirmationTokenAsync(user)))
            });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Verification email sent. Please check your email.", HttpContext);
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
