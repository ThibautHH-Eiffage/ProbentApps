@page "/Account/LoginWith2fa"

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle Title="Two-factor authentication" />

<MudGrid>
    <MudItem md="6">
        <StatusMessage Message="@message" />
        <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />

            <MudText GutterBottom>Enter your authenticator code.</MudText>

            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <input type="hidden" name="RememberMe" value="@RememberMe" />
            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.TwoFactorCode)" @bind-Value="Input.TwoFactorCode"
                        Label="Authenticator code"
                        autocomplete="one-time-code" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticCheckBox For="@(() => Input.RememberMachine)" @bind-Value="Input.RememberMachine">Remember this machine</MudStaticCheckBox>
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth FormAction="FormAction.Submit">Log in</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
</MudGrid>

<MudText Class="mt-6">
    Don't have access to your authenticator device?
    You can <MudLink Href="@(RedirectManager.GetUriWithReturnUrl("Account/LoginWithRecoveryCode", ReturnUrl))">log in with a recovery code</MudLink>.
</MudText>

@code {
    private string? message;
    private Guid userId;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (await SignInManager.GetTwoFactorAuthenticationUserAsync() is ApplicationUser user)
        {
            userId = user.Id;
        }
        else
        {
            RedirectManager.RedirectToWithReturnUrl("Account/Login", ReturnUrl);
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);

        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' locked out.", userId);
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Account has been locked out. Please try again later.", HttpContext);
        }
        else
        {
            message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(6, ErrorMessage = "The {0} must be exactly {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }
}
