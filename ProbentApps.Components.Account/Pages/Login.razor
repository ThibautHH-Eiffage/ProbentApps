@page "/Account/Login"

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<MudText Typo="Typo.h3" GutterBottom>Log in</MudText>

<MudGrid>
    <MudItem md="6">
        <StatusMessage Message="@message" />
        <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="login" method="post">
            <DataAnnotationsValidator />

            <MudText GutterBottom>Use a local account to log in.</MudText>

            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Username)" @bind-Value="Input.Username"
                        Label=@(nameof(Input.Username))
                        autocomplete="username" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                        Label=@(nameof(Input.Password)) InputType="InputType.Password"
                        autocomplete="current-password" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Remember me?</MudStaticCheckBox>
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth FormAction="FormAction.Submit">Log in</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>

        <MudStack Class="mt-6">
            <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink>
            <MudLink Href="@(RedirectManager.GetUriWithReturnUrl("Account/Register", ReturnUrl))">Register as a new user</MudLink>
            <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink>
        </MudStack>
    </MudItem>
    <MudItem md="6">
        <MudText GutterBottom>Use another service to log in.</MudText>
        <ExternalLoginPicker />
    </MudItem>
</MudGrid>

@code {
    private string? message;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task OnValidSubmitAsync()
    {
        if ((await UserManager.FindByNameAsync(Input.Username) ?? await UserManager.FindByEmailAsync(Input.Username)) is ApplicationUser user)
        {
            var result = await SignInManager.PasswordSignInAsync(user, Input.Password, Input.RememberMe, lockoutOnFailure: true);

            if (result.Succeeded)
            {
                Logger.LogInformation("User with ID '{UserId}' logged in.", user.Id);
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else if (result.RequiresTwoFactor)
            {
                RedirectManager.RedirectTo("Account/LoginWith2fa",
                    new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User with ID '{UserId}' locked out.", user.Id);
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Account has been locked out. Please try again later.", HttpContext);
            }
        }

        message = "Error: Invalid login attempt.";
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = nameof(Username))]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = nameof(Password))]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
