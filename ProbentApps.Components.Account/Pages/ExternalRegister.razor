@page "/Account/ExternalRegister"

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalRegister> Logger

<PageTitle>Register</PageTitle>

<MudText Typo="Typo.h3" GutterBottom>Register</MudText>

<MudAlert Severity="Severity.Info">
    You've successfully authenticated with <MudText HtmlTag="strong">@ProviderDisplayName</MudText>.
    Please enter an email address for this site below and click the Register button to finish logging in.
</MudAlert>

<MudGrid>
    <MudItem md="6">
        <StatusMessage Message="@message" />
        <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="external-register" method="post">
            <DataAnnotationsValidator />

            <MudText Typo="Typo.body1" GutterBottom>Associate your @ProviderDisplayName account.</MudText>

            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                        Label="Email" Placeholder="name@example.com"
                        autocomplete="username" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth FormAction="FormAction.Submit">Register</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo?.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error: Failed to load external login information.", HttpContext);
        }

        externalLoginInfo = info;

        if (!HttpMethods.IsGet(HttpContext.Request.Method) || Action != LoginCallbackAction)
        {
            RedirectManager.RedirectTo("Account/Login");
        }

        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);
        if (result.Succeeded)
        {
            Logger.LogInformation(
                "User with ID '{UserId}' logged in with provider '{LoginProvider}'.",
                UserManager.GetUserId(externalLoginInfo.Principal),
                externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' locked out.", UserManager.GetUserId(externalLoginInfo.Principal));
            RedirectManager.RedirectToWithStatus("Account/Login", "Error: Account has been locked out. Please try again later.", HttpContext);
        }

        Input.Email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
    }

    private async Task OnValidSubmitAsync()
    {
        if (externalLoginInfo is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error: Failed to load external login information during confirmation.", HttpContext);
        }

        var user = new ApplicationUser() { ManagedStructures = null! };

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await ((UserManager.SupportsUserEmail ? UserStore as IUserEmailStore<ApplicationUser> : null)
            ?.SetEmailAsync(user, Input.Email, CancellationToken.None) ?? Task.CompletedTask);

        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, externalLoginInfo);
            if (result.Succeeded)
            {
                var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                    new Dictionary<string, object?>
                    {
                        ["userId"] = user.Id,
                        ["code"] = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(
                            await UserManager.GenerateEmailConfirmationTokenAsync(user)))
                    });

                await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                Logger.LogInformation("User with ID '{UserId}' created an account using {Name} provider.", user.Id, externalLoginInfo.LoginProvider);

                if (UserManager.Options.SignIn.RequireConfirmedAccount)
                {
                    RedirectManager.RedirectToWithStatus("Account/Login", "Verification email sent. Please check your email.", HttpContext);
                }

                await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        message = $"Error: {string.Join(", ", result.Errors.Select(error => error.Description))}";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = default!;
    }
}
