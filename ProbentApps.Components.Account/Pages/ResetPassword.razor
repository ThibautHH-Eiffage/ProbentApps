@page "/Account/ResetPassword"

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle Title="Reset password" />

<MudGrid>
    <MudItem md="6">
        <StatusMessage Message="@message" />
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />

            <MudText GutterBottom>Reset your password.</MudText>

            <input type="hidden" name="Input.UserId" value="@Input.UserId" />
            <input type="hidden" name="Input.Code" value="@Input.Code" />
            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                        Label="Password" InputType="InputType.Password"
                        autocomplete="new-password" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                        Label="Confirm password" InputType="InputType.Password"
                        autocomplete="new-password" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth FormAction="FormAction.Submit">Register</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    private string? message;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override void OnInitialized()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectToWithStatus("Account/ForgotPassword", "Error: Invalid password reset link.", HttpContext);
        }

        Input.UserId = UserId;
        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        if (await UserManager.FindByIdAsync(Input.UserId) is ApplicationUser user)
        {
            var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
            if (!result.Succeeded)
            {
                message = $"Error: {string.Join(", ", result.Errors.Select(error => error.Description))}";
                return;
            }
        }

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been reset successfully. You can now log in.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare(nameof(Password), ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Required]
        public string UserId { get; set; } = default!;

        [Required]
        public string Code { get; set; } = default!;
    }
}
