@page "/Account/Manage/GenerateRecoveryCodes"

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<GenerateRecoveryCodes> Logger

<PageTitle>@(recoveryCodes is null ? "Generate two-factor authentication (2FA) recovery codes" : "Recovery codes")</PageTitle>

<MudText Typo="Typo.h5" GutterBottom>@(recoveryCodes is null ? "Generate two-factor authentication (2FA) recovery codes" : "Recovery codes")</MudText>

<StatusMessage Message="@message" />

<MudAlert Severity="Severity.Warning" Variant="Variant.Text">
@if (recoveryCodes is not null)
{
    <MudText HtmlTag="strong">Put these codes in a safe place.</MudText>
    <MudText>
        If you lose your device and don't have the recovery codes you will lose access to your account.
    </MudText>
}
else
{
    <MudText>
        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key
        used in an authenticator app you should <MudLink Href="Account/Manage/ResetAuthenticator">reset your authenticator keys</MudLink>.
    </MudText>
}
</MudAlert>

@if (recoveryCodes is null)
{
    <PostForm FormName="generate-recovery-codes" OnSubmit="OnSubmitAsync">
        <MudButton Color="Color.Error" ButtonType="ButtonType.Submit">Generate recovery codes</MudButton>
    </PostForm>
}
else
{
    <MudGrid>
        <MudItem md="12">
            @foreach (var recoveryCode in recoveryCodes)
            {
                <MudText Typo="Typo.body1" HtmlTag="code">@recoveryCode</MudText>
            }
        </MudItem>
    </MudGrid>
}

@code {
    private string? message;
    private ApplicationUser user = default!;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (!await UserManager.GetTwoFactorEnabledAsync(await UserAccessor.GetRequiredUserAsync(HttpContext)))
        {
            RedirectManager.RedirectTo("Account/Manage/EnableAuthenticator");
        }
    }

    private async Task OnSubmitAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);

        Logger.LogInformation("User with ID '{UserId}' generated new 2FA recovery codes.", userId);

        message = "Recovery codes generated successfully.";
    }
}
