@page "/Account/Manage"

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Index> Logger

<PageTitle Title="Profile" SubPage />

<StatusMessage />

<EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />

    <MudGrid>
        <MudItem md="12">
            <MudStaticTextField For="@(() => Input.Username)" @bind-Value="Input.Username"
                Label="Username" HelperText="Please choose your username."
                autocomplete="username" aria-required="true" />
        </MudItem>
        <MudItem md="12">
            <MudStaticTextField For="@(() => Input.PhoneNumber)" @bind-Value="Input.PhoneNumber"
                Label="Phone number" HelperText="Please enter your phone number."
                autocomplete="tel-national" />
        </MudItem>
        <MudItem md="12">
            <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth FormAction="FormAction.Submit">Save</MudStaticButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        if (HttpMethods.IsPost(HttpContext.Request.Method) && string.IsNullOrWhiteSpace(Input.PhoneNumber))
        {
            Input.PhoneNumber = null;
        }

        Input.Username ??= username;
        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.Username != username)
        {
            var setNameResult = await UserManager.SetUserNameAsync(user, Input.Username);
            if (!setNameResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set user name.", HttpContext);
            }

            Logger.LogInformation("User with ID '{UserId}' changed their username to '{UserName}'.", user.Id, Input.Username);
        }

        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }

            Logger.LogInformation("User with ID '{UserId}' changed their phone number to '{PhoneNumber}'.", user.Id, Input.PhoneNumber);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = nameof(Username))]
        public string? Username { get; set; }

        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
