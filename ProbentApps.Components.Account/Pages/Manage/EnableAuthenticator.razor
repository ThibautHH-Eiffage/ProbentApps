@page "/Account/Manage/EnableAuthenticator"

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

<PageTitle Title="Configure a two-factor authentication app" SubPage />

<StatusMessage Message="@message" />

<MudText GutterBottom>To use an authenticator app go through the following steps:</MudText>

<ol>
    <li>
        <MudText Typo="Typo.body2">Install a two-factor authenticator app.</MudText>
    </li>
    <li>
        <MudText Typo="Typo.body2">
            Enter this key into your two factor authenticator app. Spaces and casing do not matter.
        </MudText>

        <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Key">@sharedKey</MudAlert>
    </li>
    <li>
        <MudText Typo="Typo.body2">
            Once you have input the key above, your two factor authentication app will provide you
            with a one-time code. Enter the code in the confirmation box below.
        </MudText>

        <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Code)" @bind-Value="@Input.Code"
                        Label="Verification code" HelperText="Please enter the code."
                        autocomplete="one-time-code" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth FormAction="FormAction.Submit">Verify</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </li>
</ol>

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string? message;
    private ApplicationUser user = default!;
    private string? sharedKey;
    private string? authenticatorUri;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        await LoadSharedKeyAndQrCodeUriAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        // Strip spaces and hyphens
        var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

        var is2faTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
            user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2faTokenValid)
        {
            message = "Error: Verification code is invalid.";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, true);

        Logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", user.Id);

        RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", "Your authenticator app has been verified.", HttpContext);
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
    {
        // Load the authenticator key & QR code URI to display on the form
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey) =>
        string.Format(
            System.Globalization.CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode(@$"{nameof(ProbentApps)}.{nameof(Components)}.{nameof(Account)}"),
            UrlEncoder.Encode(email),
            unformattedKey);

    private sealed class InputModel
    {
        [Required]
        [StringLength(6, ErrorMessage = "The {0} must be exactly {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Verification Code")]
        public string Code { get; set; } = "";
    }
}
