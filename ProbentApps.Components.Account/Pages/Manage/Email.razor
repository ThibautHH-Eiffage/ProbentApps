@page "/Account/Manage/Email"

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage email address</PageTitle>

<MudText Typo="Typo.h5" GutterBottom>Manage email address</MudText>

<StatusMessage Message="@message" />

<MudGrid>
    <MudItem md="12">
        <MudStaticTextField Value="@email" Disabled Placeholder="No email address registered" Label="Email address"
            Adornment="@(email is not null ? Adornment.End : Adornment.None)"
            AdornmentIcon="@(isEmailConfirmed ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)"
            AdornmentColor="@(isEmailConfirmed ? Color.Success : Color.Error)" />
        @if (email is not null && !isEmailConfirmed)
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Warning" Class="mt-2 py-0">
                Your email address is unconfirmed!
            </MudAlert>
        }
    </MudItem>
    @if (email is not null && !isEmailConfirmed)
    {
        <MudItem md="12">
            <PostForm FormName="send-verification" OnSubmit="OnSendEmailVerificationAsync">
                <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth FormAction="FormAction.Submit">Send verification email</MudStaticButton>
            </PostForm>
        </MudItem>
    }
    <MudItem md="12">
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField @bind-Value="@Input.NewEmail" For="@(() => Input.NewEmail)"
                        Label="New email address" HelperText="Please enter your new email address."
                        autocomplete="email" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth FormAction="FormAction.Submit">Change email address</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        await SendLinkAsync("Account/ConfirmEmailChange", Input.NewEmail, await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        await SendLinkAsync("Account/ConfirmEmail", email, await UserManager.GenerateEmailConfirmationTokenAsync(user));

        message = "Verification email sent. Please check your email.";
    }

    private Task SendLinkAsync(string uri, string email, string code)
    {
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri(uri).AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = user.Id, ["code"] = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code)) });

        return EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
