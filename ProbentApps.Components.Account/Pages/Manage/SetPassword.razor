@page "/Account/Manage/SetPassword"

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<SetPassword> Logger

<PageTitle>Set password</PageTitle>

<MudText Typo="Typo.h5" GutterBottom>Set password</MudText>

<MudAlert Severity="Severity.Info" Variant="Variant.Text">
    You do not have a local account password for this site.
    Add a password so you can log in without an external service.
</MudAlert>

<StatusMessage Message="@message" />

<MudGrid>
    <MudItem xl="6">
        <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />

            <MudText Typo="Typo.body1" GutterBottom>Create a new account.</MudText>

            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.NewPassword)" @bind-Value="Input.NewPassword" InputType="InputType.Password"
                        Label="New password" Placeholder="password"
                        autocomplete="new-password" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword" InputType="InputType.Password"
                        Label="Confirm new password" Placeholder="confirm password"
                        autocomplete="new-password" aria-required="true" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth FormAction="FormAction.Submit">Set password</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (await UserManager.HasPasswordAsync(await UserAccessor.GetRequiredUserAsync(HttpContext)))
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var result = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!result.Succeeded)
        {
            message = $"Error: {string.Join(", ", result.Errors.Select(error => error.Description))}";
            return;
        }

        Logger.LogInformation("User with ID '{UserId}' set a local password.", user.Id);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToCurrentPageWithStatus("A local password has been set.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare(nameof(NewPassword), ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
