@page "/Account/Manage/ExternalLogins"

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IUserStore<ApplicationUser> UserStore
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogins> Logger

<PageTitle>Manage external logins</PageTitle>

<MudText Typo="Typo.h5" GutterBottom>Manage external logins</MudText>

@if (currentLogins?.Count > 0)
{
    <MudText Typo="Typo.h6">Registered logins</MudText>
    <MudDivider />
    <table class="table">
        <tbody>
            @foreach (var login in currentLogins)
            {
                <tr>
                    <td>@login.ProviderDisplayName</td>
                    <td>
                        @if (showRemoveButton)
                        {
                            <PostForm FormName="@($"remove-login-{login.LoginProvider}")" OnSubmit="OnSubmitAsync">
                                <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider" />
                                <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey" />
                                <input type="hidden" name="@nameof(DisplayName)" value="@login.ProviderDisplayName" />
                                <MudTooltip Text=@($"Remove this {login.ProviderDisplayName} login from your account")>
                                    <MudButton ButtonType="ButtonType.Submit">Remove</MudButton>
                                </MudTooltip>
                            </PostForm>
                        }
                        else
                        {
                            @: &nbsp;
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (otherLogins?.Count > 0)
{
    <MudText Typo="Typo.h6">Add another service to login</MudText>
    <MudDivider />
    <PostForm Action="Account/Manage/LinkExternalLogin">
        @foreach (var provider in otherLogins)
        {
            <MudTooltip Text=@($"Log in using your {provider.DisplayName} account")>
                <MudButton ButtonType="ButtonType.Submit" name="Provider" value="@provider.Name">@provider.DisplayName</MudButton>
            </MudTooltip>
        }
    </PostForm>
}

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private ApplicationUser user = default!;
    private IList<UserLoginInfo>? currentLogins;
    private IList<AuthenticationScheme>? otherLogins;
    private bool showRemoveButton;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private string? LoginProvider { get; set; }

    [SupplyParameterFromForm]
    private string? ProviderKey { get; set; }

    [SupplyParameterFromForm]
    private string? DisplayName { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        currentLogins = await UserManager.GetLoginsAsync(user);
        otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .Where(auth => currentLogins.All(ul => auth.Name != ul.LoginProvider))
            .ToList();

        bool hasPassword = false;
        if (UserStore is IUserPasswordStore<ApplicationUser> userPasswordStore)
        {
            hasPassword = await userPasswordStore.HasPasswordAsync(user, HttpContext.RequestAborted);
        }

        showRemoveButton = hasPassword || currentLogins.Count > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }
    }

    private async Task OnSubmitAsync()
    {
        var result = await UserManager.RemoveLoginAsync(user, LoginProvider!, ProviderKey!);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus(
                $"Error: The {DisplayName} login could not be removed. {string.Join(", ", result.Errors.Select(error => error.Description))}",
                HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);

        Logger.LogInformation("User with ID '{UserId}' removed their login for provider '{LoginProvider}'.", user.Id, LoginProvider);

        RedirectManager.RedirectToCurrentPageWithStatus($"The {DisplayName} login was removed.", HttpContext);
    }

    private async Task OnGetLinkLoginCallbackAsync()
    {
        var info = await SignInManager.GetExternalLoginInfoAsync(user.Id.ToString());
        if (info is null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);
        }

        var result = await UserManager.AddLoginAsync(user, info);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus(
                $"Error: The {info.ProviderDisplayName} login could not be added. {string.Join(", ", result.Errors.Select(error => error.Description))}",
                HttpContext);
        }

        Logger.LogInformation("User with ID '{UserId}' a added login for provider '{LoginProvider}'.", user.Id, info.LoginProvider);

        // Clear the existing external cookie to ensure a clean login process
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        RedirectManager.RedirectToCurrentPageWithStatus($"The {info.ProviderDisplayName} login was added.", HttpContext);
    }
}
